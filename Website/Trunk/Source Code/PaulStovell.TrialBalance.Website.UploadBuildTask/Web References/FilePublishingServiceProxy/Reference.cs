//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.312.
// 
#pragma warning disable 1591

namespace PaulStovell.TrialBalance.Website.UploadBuildTask.FilePublishingServiceProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FilePublishingServiceSoap", Namespace="http://download.trialbalance.net.au/")]
    public partial class FilePublishingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadManagedFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadUnmanagedFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FilePublishingService() {
            this.Url = global::PaulStovell.TrialBalance.Website.UploadBuildTask.Properties.Settings.Default.PaulStovell_TrialBalance_Website_UploadBuildTask_FilePublishingServiceProxy_FilePublishingService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadManagedFileCompletedEventHandler UploadManagedFileCompleted;
        
        /// <remarks/>
        public event UploadUnmanagedFileCompletedEventHandler UploadUnmanagedFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://download.trialbalance.net.au/UploadManagedFile", RequestNamespace="http://download.trialbalance.net.au/", ResponseNamespace="http://download.trialbalance.net.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadManagedFile(string username, string password, string fileName, string contentType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent) {
            object[] results = this.Invoke("UploadManagedFile", new object[] {
                        username,
                        password,
                        fileName,
                        contentType,
                        fileContent});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadManagedFileAsync(string username, string password, string fileName, string contentType, byte[] fileContent) {
            this.UploadManagedFileAsync(username, password, fileName, contentType, fileContent, null);
        }
        
        /// <remarks/>
        public void UploadManagedFileAsync(string username, string password, string fileName, string contentType, byte[] fileContent, object userState) {
            if ((this.UploadManagedFileOperationCompleted == null)) {
                this.UploadManagedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadManagedFileOperationCompleted);
            }
            this.InvokeAsync("UploadManagedFile", new object[] {
                        username,
                        password,
                        fileName,
                        contentType,
                        fileContent}, this.UploadManagedFileOperationCompleted, userState);
        }
        
        private void OnUploadManagedFileOperationCompleted(object arg) {
            if ((this.UploadManagedFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadManagedFileCompleted(this, new UploadManagedFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://download.trialbalance.net.au/UploadUnmanagedFile", RequestNamespace="http://download.trialbalance.net.au/", ResponseNamespace="http://download.trialbalance.net.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadUnmanagedFile(string username, string password, string filePath, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent) {
            this.Invoke("UploadUnmanagedFile", new object[] {
                        username,
                        password,
                        filePath,
                        fileContent});
        }
        
        /// <remarks/>
        public void UploadUnmanagedFileAsync(string username, string password, string filePath, byte[] fileContent) {
            this.UploadUnmanagedFileAsync(username, password, filePath, fileContent, null);
        }
        
        /// <remarks/>
        public void UploadUnmanagedFileAsync(string username, string password, string filePath, byte[] fileContent, object userState) {
            if ((this.UploadUnmanagedFileOperationCompleted == null)) {
                this.UploadUnmanagedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadUnmanagedFileOperationCompleted);
            }
            this.InvokeAsync("UploadUnmanagedFile", new object[] {
                        username,
                        password,
                        filePath,
                        fileContent}, this.UploadUnmanagedFileOperationCompleted, userState);
        }
        
        private void OnUploadUnmanagedFileOperationCompleted(object arg) {
            if ((this.UploadUnmanagedFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadUnmanagedFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    public delegate void UploadManagedFileCompletedEventHandler(object sender, UploadManagedFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadManagedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadManagedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    public delegate void UploadUnmanagedFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591