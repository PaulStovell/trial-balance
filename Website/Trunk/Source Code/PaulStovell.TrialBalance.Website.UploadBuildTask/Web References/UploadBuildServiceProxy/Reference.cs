//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.312.
// 
#pragma warning disable 1591

namespace PaulStovell.TrialBalance.Website.UploadBuildTask.UploadBuildServiceProxy {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UploadBuildServiceSoap", Namespace="http://trialbalance.net.au/")]
    public partial class UploadBuildService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadBuildOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextBuildNumberOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public UploadBuildService() {
            this.Url = global::PaulStovell.TrialBalance.Website.UploadBuildTask.Properties.Settings.Default.PaulStovell_TrialBalance_Website_UploadBuildTask_UploadBuildServiceProxy_UploadBuildService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadBuildCompletedEventHandler UploadBuildCompleted;
        
        /// <remarks/>
        public event GetNextBuildNumberCompletedEventHandler GetNextBuildNumberCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://trialbalance.net.au/UploadBuild", RequestNamespace="http://trialbalance.net.au/", ResponseNamespace="http://trialbalance.net.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadBuild(string username, string password, string buildNumber, System.DateTime buildDate, bool isSuccessful, string buildStatus, string version, bool isPublic, string releaseNotes, string sourceCodeUrl, string installerUrl, string clickOnceUrl) {
            this.Invoke("UploadBuild", new object[] {
                        username,
                        password,
                        buildNumber,
                        buildDate,
                        isSuccessful,
                        buildStatus,
                        version,
                        isPublic,
                        releaseNotes,
                        sourceCodeUrl,
                        installerUrl,
                        clickOnceUrl});
        }
        
        /// <remarks/>
        public void UploadBuildAsync(string username, string password, string buildNumber, System.DateTime buildDate, bool isSuccessful, string buildStatus, string version, bool isPublic, string releaseNotes, string sourceCodeUrl, string installerUrl, string clickOnceUrl) {
            this.UploadBuildAsync(username, password, buildNumber, buildDate, isSuccessful, buildStatus, version, isPublic, releaseNotes, sourceCodeUrl, installerUrl, clickOnceUrl, null);
        }
        
        /// <remarks/>
        public void UploadBuildAsync(string username, string password, string buildNumber, System.DateTime buildDate, bool isSuccessful, string buildStatus, string version, bool isPublic, string releaseNotes, string sourceCodeUrl, string installerUrl, string clickOnceUrl, object userState) {
            if ((this.UploadBuildOperationCompleted == null)) {
                this.UploadBuildOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadBuildOperationCompleted);
            }
            this.InvokeAsync("UploadBuild", new object[] {
                        username,
                        password,
                        buildNumber,
                        buildDate,
                        isSuccessful,
                        buildStatus,
                        version,
                        isPublic,
                        releaseNotes,
                        sourceCodeUrl,
                        installerUrl,
                        clickOnceUrl}, this.UploadBuildOperationCompleted, userState);
        }
        
        private void OnUploadBuildOperationCompleted(object arg) {
            if ((this.UploadBuildCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadBuildCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://trialbalance.net.au/GetNextBuildNumber", RequestNamespace="http://trialbalance.net.au/", ResponseNamespace="http://trialbalance.net.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextBuildNumber(string username, string password) {
            object[] results = this.Invoke("GetNextBuildNumber", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextBuildNumberAsync(string username, string password) {
            this.GetNextBuildNumberAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetNextBuildNumberAsync(string username, string password, object userState) {
            if ((this.GetNextBuildNumberOperationCompleted == null)) {
                this.GetNextBuildNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextBuildNumberOperationCompleted);
            }
            this.InvokeAsync("GetNextBuildNumber", new object[] {
                        username,
                        password}, this.GetNextBuildNumberOperationCompleted, userState);
        }
        
        private void OnGetNextBuildNumberOperationCompleted(object arg) {
            if ((this.GetNextBuildNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextBuildNumberCompleted(this, new GetNextBuildNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    public delegate void UploadBuildCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    public delegate void GetNextBuildNumberCompletedEventHandler(object sender, GetNextBuildNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextBuildNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextBuildNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591